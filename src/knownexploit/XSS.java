package knownexploit;

import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import app.App;
import entrypoint.EntryPoint;
import entrypoint.XSSEntryPoint;
import sink.Sink;
import sink.XSSSink;
import xml.XMLParser;

public class XSS extends KnownExploit{

	public XSS(ArrayList<String> codeLines){
		super(codeLines, "Cross Site Scripting", new XMLParser("configs/XSS.xml"));
	}
	
	@Override
	public boolean isVunerable() {
		Boolean vunerability = false;
		if(!_sinks.isEmpty()){	
			for(Sink s : _sinks){
				
				for(EntryPoint ep : _eps){
					if(resolveVariableToValue(s.getFirstArgument()).equals(ep.getEntryPointValue())){		/*TODO*/
						vunerability = true;
						if(!App.ansiColors){								
							_vunerabilityIntel += "Vunerability type: " + _vunerabilityType + ".\n"
							+ "A vunerable method '" + _sink.getSinkPattern() + "' "
							+ "executes '" + resolveVariableToValue(_sink.getFirstArgument()) + "', that it's not sanitized.\n"
							+ "Add '" + _sink.getSinkPattern() + " " + _xmlParser.getValidator(_sink.getSinkPattern()) + "(" 
							+ _sink.getFirstArgument() + ")"
							+ "' to fix it.\n\n";
						}else{
							_vunerabilityIntel += "Vunerability type: " + App.ANSI_RED + _vunerabilityType + App.ANSI_RESET + ".\n"
							+ "A vunerable method '" + App.ANSI_CYAN + _sink.getSinkPattern() + App.ANSI_RESET + "' "
							+ "executes '" + App.ANSI_CYAN + resolveVariableToValue(_sink.getFirstArgument()) + App.ANSI_RESET + "', that it's not sanitized.\n"
							+ "Add '" + App.ANSI_GREEN + _sink.getSinkPattern() + " " + _xmlParser.getValidator(_sink.getSinkPattern()) + "(" 
							+ _sink.getFirstArgument() + ")" + App.ANSI_RESET
							+ "' to fix it.\n\n";
						}
					}
				}
			}
		}
		return vunerability;
	}
	
	private String resolveVariableToValue(String var){
		String entryPoint = "";
		if(!_variableAndValue.isEmpty())
			entryPoint = _variableAndValue.get(var);
		else entryPoint = var;
		
		return entryPoint;
	} 

	@Override
	protected void doLogic() {
		Pattern r = Pattern.compile("<?php (.*?)[?>]");
		String withPhp = "";

		for(String line : getCodeLines()){
			Matcher m = r.matcher(line);
			if(m.find())
				withPhp = m.group(1);//echo $firstname; || echo $_SERVER["PHP_SELF"]
			
			if(withPhp.isEmpty())
				withPhp = line;
			
			if((withPhp.charAt(withPhp.length() - 1) == ";".charAt(0)) && (withPhp.contains("="))){//$firstname = $_POST['firstname'];
				withPhp = withPhp.replace(";", "");
				fillVariableAndValue(withPhp);
				_eps.add(new XSSEntryPoint(withPhp, _xmlParser.getEntryPoints()));
				

			}else{ 
				if(withPhp.contains(" ")){//echo $_POST['username']; || echo $firstname; || echo $_SERVER["PHP_SELF"]
					
					withPhp = withPhp.replace(";", "");
									
					_ep = new XSSEntryPoint(withPhp, _xmlParser.getEntryPoints());
					_sink = new XSSSink(withPhp, _xmlParser.getSinks());
					_sinks.add(_sink);
					_eps.add(_ep);
				}
				
			}
			withPhp = "";
		}
		
	}

}
